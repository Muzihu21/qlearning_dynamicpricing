# -*- coding: utf-8 -*-
"""q_learning_env.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1odyp4wfERpQSg-Sck8_4BazOv6WUos-V

Q_LEARNING ENVIRONMENT BUILDING
"""

import pandas as pd
import random

class PenjualanEnv:
    def __init__(self, data_path='env_ready_data.csv', max_steps=10):
        self.data = pd.read_csv(data_path)
        self.states = list(zip(self.data['harga_index'], self.data['penjualan_level']))
        self.rewards = self.data['reward'].tolist()

        self.unique_harga = sorted(self.data['harga_index'].unique())
        self.unique_penjualan = sorted(self.data['penjualan_level'].unique())
        self.n_actions = 3  # 0: Turun harga, 1: Tetap, 2: Naik harga

        self.max_steps = max_steps
        self.reset()

    def reset(self):
        self.current_step = 0
        self.state = random.choice(self.states)
        return self.state

    def step(self, action):
        harga_idx, penjualan_lvl = self.state

        # Transisi harga berdasarkan aksi
        if action == 0 and harga_idx > min(self.unique_harga):
            harga_idx -= 1
        elif action == 2 and harga_idx < max(self.unique_harga):
            harga_idx += 1
        # action == 1 â†’ harga tetap

        # Cari semua data dengan state baru
        possible_states = [(h, p) for h, p in self.states if h == harga_idx]
        next_state = random.choice(possible_states) if possible_states else self.state

        self.state = next_state
        self.current_step += 1

        # Ambil reward dari state baru
        try:
            idx = self.states.index(self.state)
            reward = self.rewards[idx]
        except ValueError:
            reward = 0  # fallback kalau state tidak ditemukan

        done = self.current_step >= self.max_steps
        return self.state, reward, done