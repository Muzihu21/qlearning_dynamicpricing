# -*- coding: utf-8 -*-
"""application_well

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nTO4jpAxZfmF9MLLnRM8H6XVjzqVl0tj
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from q_learning_env import PenjualanEnv

# ========== Setup ==========
st.set_page_config(page_title="Q-Learning Harga", layout="wide")

# ========== Load Q-table ==========
try:
    q_table = np.load("q_table.npy")
except FileNotFoundError:
    st.error("❌ File q_table.npy tidak ditemukan. Pastikan sudah diunggah ke folder.")
    st.stop()

# ========== Init Env ==========
env = PenjualanEnv()
env.unique_states = list(set(env.states))
env.n_states = len(env.unique_states)

# ========== Fungsi Evaluasi ==========
def evaluate_policy(env, q_table, n_trials=100):
    total_rewards = []
    for _ in range(n_trials):
        state = env.reset()
        done = False
        episode_reward = 0
        while not done:
            try:
                state_index = env.unique_states.index(state)
                action = np.argmax(q_table[state_index])
                next_state, reward, done, _ = env.step(action)
                episode_reward += reward
                state = next_state
            except Exception as e:
                st.warning(f"Ada error waktu evaluasi policy: {e}")
                break
        total_rewards.append(episode_reward)
    return np.mean(total_rewards)

# ========== Sidebar ==========
st.sidebar.title("🔧 Menu")
menu = st.sidebar.radio("Pilih Halaman", [
    "📊 Visualisasi Q-table",
    "📈 Evaluasi Policy",
    "ℹ️ Tentang"
])

# ========== Halaman: Q-table ==========
if menu == "📊 Visualisasi Q-table":
    st.title("📊 Strategi Harga: Q-table Heatmap")
    st.markdown("Tiap nilai menunjukkan seberapa 'bagus' sebuah harga untuk kondisi tertentu.")

    try:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.heatmap(q_table, annot=True, cmap="YlGnBu",
                    xticklabels=env.harga_list,
                    yticklabels=env.unique_states,
                    ax=ax)
        ax.set_xlabel("Harga (Action)")
        ax.set_ylabel("State")
        st.pyplot(fig)
    except Exception as e:
        st.error(f"❌ Gagal mem-plot heatmap: {e}")

# ========== Halaman: Evaluasi ==========
elif menu == "📈 Evaluasi Policy":
    st.title("📈 Evaluasi Policy")
    st.markdown("Simulasi policy hasil pelatihan untuk melihat performa strategi harga.")

    trials = st.slider("Jumlah Simulasi Episode", 10, 500, 100, step=10)
    avg_reward = evaluate_policy(env, q_table, trials)
    st.success(f"🎯 Rata-rata reward dari {trials} simulasi: **{avg_reward:.2f}**")

# ========== Halaman: Grafik Reward ==========
elif menu == "📉 Grafik Reward":
    st.title("📉 Grafik Reward per Episode")
    try:
        rewards = np.load("rewards_per_episode.npy")
        fig, ax = plt.subplots()
        ax.plot(rewards, label='Reward per Episode', color='green')
        ax.set_xlabel("Episode")
        ax.set_ylabel("Reward")
        ax.set_title("Reward per Episode (Training Progress)")
        ax.legend()
        st.pyplot(fig)
    except FileNotFoundError:
        st.error("File `rewards_per_episode.npy` tidak ditemukan.")

# ========== Halaman: Tentang ==========
elif menu == "ℹ️ Tentang":
    st.title("ℹ️ Tentang Aplikasi")
    st.markdown("""
    Aplikasi ini dibuat sebagai bagian dari skripsi untuk mensimulasikan **Reinforcement Learning (Q-Learning)**
    dalam konteks **penetapan harga produk**.

    **Fitur:**
    - Heatmap Q-table
    - Evaluasi Policy

    **Author**: Muzihu — AI engineer SUKSES! 🧠🔥
    **Modul**: Python, Streamlit, NumPy, Matplotlib, Seaborn
    """)

# ========== Footer ==========
st.markdown("---")
st.caption("© 2025 — Made with ❤️ by Zihu")

