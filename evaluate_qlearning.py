# -*- coding: utf-8 -*-
"""evaluate_qlearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kxHOp8UzMqMgQfFhr_i7i58kdZcTemX7
"""
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import pandas as pd
from q_learning_env import PenjualanEnv

# ========== Setup ==========
os.makedirs("visualizations", exist_ok=True)

# ========== Load Environment & Q-table ==========
env = PenjualanEnv()
env.unique_states = list(set(env.states))
state_to_index = {s: i for i, s in enumerate(env.unique_states)}
q_table = np.load("q_table.npy")

# ========== Heatmap Strategi Optimal ==========
optimal_actions = np.argmax(q_table, axis=1)
unique_harga = sorted(env.unique_harga)
unique_penjualan = sorted(env.unique_penjualan)
heatmap_matrix = np.full((len(unique_penjualan), len(unique_harga)), -1)

for state, idx in state_to_index.items():
    harga_idx, penjualan_lvl = state
    row = unique_penjualan.index(penjualan_lvl)
    col = unique_harga.index(harga_idx)
    heatmap_matrix[row, col] = optimal_actions[idx]

plt.figure(figsize=(10, 6))
sns.heatmap(
    heatmap_matrix,
    annot=True,
    cmap="YlGnBu",
    xticklabels=unique_harga,
    yticklabels=unique_penjualan,
    cbar_kws={'label': 'Aksi Optimal\n0: Turun, 1: Tetap, 2: Naik'}
)
plt.xlabel("Harga Index")
plt.ylabel("Tingkat Penjualan")
plt.title("ðŸ§  Heatmap Strategi Q-Learning (Aksi Optimal per State)")
plt.tight_layout()
plt.savefig("visualizations/heatmap_q_table.png")
plt.close()
print("âœ… Heatmap strategi berhasil disimpan di visualizations/heatmap_q_table.png")

# ========== Evaluasi Perubahan Harga Tiap Episode ==========
jumlah_evaluasi = 100
episode_rewards = []
episode_harga = []

for ep in range(jumlah_evaluasi):
    state = env.reset()
    done = False
    total_reward = 0
    harga_ep = []

    while not done:
        state_idx = state_to_index[state]
        action = np.argmax(q_table[state_idx])
        next_state, reward, done = env.step(action)
        total_reward += reward

        # Ambil harga dari index â†’ harga asli
        harga_idx = next_state[0]
        harga_asli = env.harga_list[harga_idx]
        harga_ep.append(harga_asli)

        state = next_state

    episode_rewards.append(total_reward)
    episode_harga.append(harga_ep)

avg_reward = np.mean(episode_rewards)
print(f"âœ… Evaluasi {jumlah_evaluasi} episode selesai.")
print(f"ðŸŽ¯ Rata-rata Reward: {avg_reward:.2f}")

# ========== Grafik Perubahan Harga ==========
plt.figure(figsize=(10, 5))
for i, harga_ep in enumerate(episode_harga[:10]):  # 10 episode pertama
    plt.plot(harga_ep, label=f"Ep {i+1}")
plt.xlabel("Step")
plt.ylabel("Harga Produk")
plt.title("ðŸ“ˆ Perubahan Harga Produk Selama Evaluasi")
plt.legend()
plt.tight_layout()
plt.savefig("visualizations/harga_dinamis_per_episode.png")
plt.show()

# ========== Simpan Data Harga Jika Diperlukan ==========
np.save("visualizations/episode_harga.npy", episode_harga)
np.save("visualizations/episode_rewards.npy", episode_rewards)
