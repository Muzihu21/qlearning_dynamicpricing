# -*- coding: utf-8 -*-
"""evaluate_qlearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kxHOp8UzMqMgQfFhr_i7i58kdZcTemX7
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from q_learning_env import PenjualanEnv

# Setup folder
os.makedirs("visualizations", exist_ok=True)

# Load env & Q-table
env = PenjualanEnv()
env.unique_states = list(set(env.states))
env.n_states = len(env.unique_states)
state_to_index = {s: i for i, s in enumerate(env.unique_states)}

q_table = np.load("q_table.npy")

# Ambil strategi terbaik (argmax) per state
optimal_actions = np.argmax(q_table, axis=1)

# Bentuk matriks strategi: baris = harga_index, kolom = penjualan_level
unique_harga = sorted(env.unique_harga)
unique_penjualan = sorted(env.unique_penjualan)

heatmap_matrix = np.full((len(unique_penjualan), len(unique_harga)), -1)

for state, idx in state_to_index.items():
    harga_idx, penjualan_lvl = state
    row = unique_penjualan.index(penjualan_lvl)
    col = unique_harga.index(harga_idx)
    heatmap_matrix[row, col] = optimal_actions[idx]

# Visualisasi
plt.figure(figsize=(10, 6))
sns.heatmap(
    heatmap_matrix,
    annot=True,
    cmap="YlGnBu",
    xticklabels=unique_harga,
    yticklabels=unique_penjualan,
    cbar_kws={'label': 'Aksi Optimal\n0: Turun, 1: Tetap, 2: Naik'}
)
plt.xlabel("Harga Index")
plt.ylabel("Tingkat Penjualan")
plt.title("ðŸ§  Heatmap Strategi Q-Learning (Aksi Optimal per State)")
plt.tight_layout()
plt.savefig("visualizations/heatmap_q_table.png")
plt.close()

print("âœ… Heatmap strategi berhasil disimpan di visualizations/heatmap_q_table.png")

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from q_learning_env import PenjualanEnv

# Load environment & Q-table
env = PenjualanEnv()
env.unique_states = list(set(env.states))
state_to_index = {s: i for i, s in enumerate(env.unique_states)}
index_to_state = {i: s for s, i in state_to_index.items()}
q_table = np.load("q_table.npy")

# Evaluasi policy terbaik
total_reward = 0
state = env.reset()
done = False

while not done:
    state_idx = state_to_index[state]
    action = np.argmax(q_table[state_idx])  # Ambil aksi terbaik
    next_state, reward, done = env.step(action)
    total_reward += reward
    state = next_state

print(f"Total Reward dari Policy Terbaik: {total_reward}")

# --- Heatmap Q-table (opsional visualisasi strategi)
# Ambil nilai maksimum (aksi terbaik) dari setiap state
best_actions = np.argmax(q_table, axis=1)

# Pisahkan dimensi harga dan level penjualan
harga_indices = [s[0] for s in env.unique_states]
penjualan_levels = [s[1] for s in env.unique_states]

heatmap_data = pd.DataFrame({
    'Harga': harga_indices,
    'Penjualan': penjualan_levels,
    'Aksi Terbaik': best_actions
})

# Pivot ke format matrix
pivot = heatmap_data.pivot_table(index='Penjualan', columns='Harga', values='Aksi Terbaik')

# Visualisasi
plt.figure(figsize=(8, 5))
sns.heatmap(pivot, annot=True, cmap="YlGnBu", cbar_kws={'label': 'Aksi (0:Turun, 1:Tetap, 2:Naik)'})
plt.title("ðŸ“Š Heatmap Strategi Q-Learning")
plt.xlabel("Harga Index")
plt.ylabel("Level Penjualan")
plt.tight_layout()
plt.savefig("visualizations/heatmap_q_table.png")
plt.show()

